#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2019 Meyers Tom
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import os

DEFAULT_COPYRIGHT_LOCATION="LICENSE" # location of the copyright file containing your copyright
DEFAULT_DIRECTORY=["."] # default array of files/directories to scan
DEFAULT_MODIFY_LIST=["LICENSE", "LICENSE"] # Change all occurenses of DEFAULT_MODIFY_LIST[0] to DEFAULT_MODIFY_LIST[1]
EXCLUDE_DIRS=[".git", ".svn", ".cvs"] # directories to exclude from the LICENSE file checker

def parser():
    """
    Configuration for argparse module
    """
    parser = argparse.ArgumentParser(description='Append copyright to source code.')
    parser.add_argument('source', metavar='N', nargs='*',
                    help='list of directories and files', default=DEFAULT_DIRECTORY)
    parser.add_argument('-m', '--modify', metavar='N', nargs=2,
                    help='modify an old license to a new license', default=DEFAULT_MODIFY_LIST)
    parser.add_argument('-c', '--claim', default=DEFAULT_COPYRIGHT_LOCATION, help='Location of the copyright file')
    parser.add_argument('-l','--language', default=None, help='Treat all files as the language you specify, use the file extention to denote the language')
    parser.add_argument('-v', '--version', action='store_true', help='Print the version number of this tool')
    parser.add_argument('-d', '--developer', action='store_true', help='Print information about the developer and the github page')
    parser.add_argument('-os', '--opensource', action='store_true', help='Does the same as -d option')

    args = parser.parse_args()
    return args


def convertPathToFiles(path):
    """
    Find all files contained in a directory.
    If the path is a file it simply returns the file
    """
    if os.path.isfile(path):
        return path, True
    arr = []
    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]
        for f in files:
            arr.append(root + "/" + f)
    return arr, False


def unique(arr):
    """
    Remove all duplicate entries of a directory. It Is O(N) efficient
    """
    unique_list = []

    for item in arr:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list

def findFiles(array):
    """
    Resolves all paths in an array to all file contained in that path
    eg it get an array containing direcotries/files and converts it to an array of all files in those directories
    """
    arr = []
    for path in array:
        item, isFile = convertPathToFiles(path)
        if isFile:
            arr.append(item)
        else:
            for obj in item:
                arr.append(obj)
    return unique(arr)

# TODO: Scan filetype based on the extention and based on the content
class LanguageBuilder:
    """
    Detect the language based on the file type
    We build the appropriate file handler to correctly set the copyright
    """
    def __init__(self, path, copyright, language):
        """
        If language is set then tread every file as that language.
        """
        self.path = path
        self.copyright = copyright
        self.language = language

    def addPoint(self, str):
        """
        If the file exstention doesn't start with a point (.) then we prefix it with that
        """
        if not str[0] == ".":
               str = "." + str
        return str

    def detect(self):
        if  self.language == None:
            filename, file_extension = os.path.splitext(self.path)
            e = file_extension
            filename = os.path.basename(filename)
        else:
            filename = ""
            e = self.addPoint(self.language)
        if e == ".py" or e == ".sh" or filename == "Dockerfile" or e == ".yml" or e == ".yaml" or filename.startswith("Makefile"):
            return ShellLike(self.path, self.copyright) 
        if e == ".dart" or e == ".rs" or e == ".js" or e == ".ts" or e == ".c" or  e == ".cpp" or e == ".class" or e == ".java" or e == ".h" or e == ".cs":
            return CLike(self.path, self.copyright)
        if e == ".lua":
            return LuaLike(self.path, self.copyright)
        if e == ".html":
            return HTMLLike(self.path, self.copyright)
        if e == ".css":
            return CSSLike(self.path, self.copyright)
        if e == ".go" or e == ".proto":
            return GOLike(self.path, self.copyright)
        if e == ".asm":
            return ASMLike(self.path, self.copyright)
        return Blank(self.path, self.copyright)

def readCopyright(filename):
    """
    It opens a file and returns a list of lines contained inside that file
    """
    with open(filename) as f:
            lines = f.read().splitlines()
    return lines

def prefixLines(prefix, lines):
    arr = []
    for line in lines:
        arr.append("{}{}".format(prefix, line))
    return arr

def getShebang(content):
    """
    Reads out an array of strings
    And returns the shebang and the rest of the file back.
    If no shebang is found it will return and empty string followed by the entire file.
    """
    if len(content) > 2 and  content[0] == "#" and content[1] == "!":
        content = content.split("\n")
        rest = ""
        for item in content[1:]:
            rest+="{}\n".format(item)
        return content[0] + "\n", rest
    rest = "".join(content[0:])
    return "", rest

def stringifyList(list, newline="\n"):
    """
    Convert a list of lines in a file to a string containing newlines.
    """
    string = ""
    for item in list:
        string += item + newline
    return string

class ShellLike:
    """
    Find the location to insert the data
    And converts the data to python comments
    Initialize this class on a per file basis
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright
        self.prefix = "# "

    def insert(self):
        print("inserting into file {}".format(self.path))
        copyright = prefixLines(self.prefix, self.copyright)
        with open(self.path, 'r+') as f:
            content = f.read()
            if not content.__contains__(stringifyList(copyright)):
                shebang, content = getShebang(content)
                f.seek(0)
                if len(shebang) > 0:
                    f.write(shebang + "\n")
                    f.write("\n")
                f.write(self.prefix.rstrip() + "\n")
                for line in copyright:
                    f.write(line.rstrip('\r\n') + '\n')
                f.write(self.prefix.rstrip() + "\n")
                f.write("\n")
                f.write(content)
                f.truncate()
            else:
                print("Already detected license in {}".format(self.path))

    def replace(self, new):
        """
        Detect the old copyright claim and replace it with a new version
        """
        copyright = stringifyList(prefixLines(self.prefix, self.copyright))
        newcopyright = stringifyList(prefixLines(self.prefix, new))
        with open(self.path, 'r+') as f:
            content = f.read()
            content = content.replace(copyright, newcopyright)
            f.seek(0)
            f.write(content)
            f.truncate()
            

class CLike:
    """
    Class that handles all file types based on the C syntax
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright
        self.prefix = " *  "

    def insert(self):
        print("inserting into file {}".format(self.path))
        copyright = prefixLines(self.prefix, self.copyright)
        with open(self.path, 'r+') as f:
            content = f.read()
            if not content.__contains__(stringifyList(copyright)):
                f.seek(0)
                f.write("/*\n")
                for line in copyright:
                    f.write(line.rstrip('\r\n') + '\n')
                f.write(" */\n")
                f.write("\n")
                f.write(content)
                f.truncate()
            else:
                print("Already detected license in {}".format(self.path))
    def replace(self, new):
        """
        Detect the old copyright claim and replace it with a new version
        """
        copyright = stringifyList(prefixLines(self.prefix, self.copyright))
        newcopyright = stringifyList(prefixLines(self.prefix, new))
        with open(self.path, 'r+') as f:
            content = f.read()
            content = content.replace(copyright, newcopyright)
            f.seek(0)
            f.write(content)
            f.truncate()
class ASMLike:
    """
    Class that handles all file types based on the ASM syntax
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright
        self.prefix = ";  "

    def insert(self):
        print("inserting into file {}".format(self.path))
        copyright = prefixLines(self.prefix, self.copyright)
        with open(self.path, 'r+') as f:
            content = f.read()
            if not content.__contains__(stringifyList(copyright)):
                f.seek(0)
                for line in copyright:
                    f.write(line.rstrip('\r\n') + '\n')
                f.write(content)
                f.truncate()
            else:
                print("Already detected license in {}".format(self.path))
    def replace(self, new):
        """
        Detect the old copyright claim and replace it with a new version
        """
        copyright = stringifyList(prefixLines(self.prefix, self.copyright))
        newcopyright = stringifyList(prefixLines(self.prefix, new))
        with open(self.path, 'r+') as f:
            content = f.read()
            content = content.replace(copyright, newcopyright)
            f.seek(0)
            f.write(content)
            f.truncate()

class GOLike:
    """
    Class that handles all file types based on the GO syntax
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright
        self.prefix = "// "

    def insert(self):
        print("inserting into file {}".format(self.path))
        copyright = prefixLines(self.prefix, self.copyright)
        with open(self.path, 'r+') as f:
            content = f.read()
            if not content.__contains__(stringifyList(copyright)):
                f.seek(0)
                f.write("//\n")
                for line in copyright:
                    f.write(line.rstrip('\r\n') + '\n')
                f.write("//\n")
                f.write("\n")
                f.write(content)
                f.truncate()
            else:
                print("Already detected license in {}".format(self.path))
    def replace(self, new):
        """
        Detect the old copyright claim and replace it with a new version
        """
        copyright = stringifyList(prefixLines(self.prefix, self.copyright))
        newcopyright = stringifyList(prefixLines(self.prefix, new))
        with open(self.path, 'r+') as f:
            content = f.read()
            content = content.replace(copyright, newcopyright)
            f.seek(0)
            f.write(content)
            f.truncate()

class HTMLLike:
    """
    Class that handles all file types based on the HTML syntax
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright
        self.prefix = "  "

    def insert(self):
        print("inserting into file {}".format(self.path))
        copyright = prefixLines(self.prefix, self.copyright)
        with open(self.path, 'r+') as f:
            content = f.read()
            if not content.__contains__(stringifyList(copyright)):
                f.seek(0)
                f.write("<!--\n")
                for line in copyright:
                    f.write(line.rstrip('\r\n') + '\n')
                f.write("-->\n")
                f.write(content)
                f.truncate()
            else:
                print("Already detected license in {}".format(self.path))
    def replace(self, new):
        """
        Detect the old copyright claim and replace it with a new version
        """
        copyright = stringifyList(prefixLines(self.prefix, self.copyright))
        newcopyright = stringifyList(prefixLines(self.prefix, new))
        with open(self.path, 'r+') as f:
            content = f.read()
            content = content.replace(copyright, newcopyright)
            f.seek(0)
            f.write(content)
            f.truncate()

class CSSLike:
    """
    Class that handles all file types based on the CSS syntax
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright
        self.prefix = " * "

    def insert(self):
        print("inserting into file {}".format(self.path))
        copyright = prefixLines(self.prefix, self.copyright)
        with open(self.path, 'r+') as f:
            content = f.read()
            if not content.__contains__(stringifyList(copyright)):
                f.seek(0, 0)
                f.write("/*\n")
                for line in copyright:
                    f.write(line.rstrip('\r\n') + '\n')
                f.write("*/\n")
                f.write(content)
                f.truncate()
            else:
                print("Already detected license in {}".format(self.path))
    def replace(self, new):
        """
        Detect the old copyright claim and replace it with a new version
        """
        copyright = stringifyList(prefixLines(self.prefix, self.copyright))
        newcopyright = stringifyList(prefixLines(self.prefix, new))
        with open(self.path, 'r+') as f:
            content = f.read()
            content = content.replace(copyright, newcopyright)
            f.seek(0)
            f.write(content)
            f.truncate()

class LuaLike:
    """
    Class that handles all file types based on the Lua comment syntax
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright
        self.prefix = "--"

    def insert(self):
        print("inserting into file {}".format(self.path))
        copyright = prefixLines(self.prefix, self.copyright)
        with open(self.path, 'r+') as f:
            content = f.read()
            if not content.__contains__(stringifyList(copyright)):
                f.seek(0, 0)
                f.write("--[[\n")
                for line in copyright:
                    f.write(line.rstrip('\r\n') + '\n')
                f.write("]]\n\n")
                f.write(content)
                f.truncate()
            else:
                print("Already detected license in {}".format(self.path))
    def replace(self, new):
        """
        Detect the old copyright claim and replace it with a new version
        """
        copyright = stringifyList(prefixLines(self.prefix, self.copyright))
        newcopyright = stringifyList(prefixLines(self.prefix, new))
        with open(self.path, 'r+') as f:
            content = f.read()
            content = content.replace(copyright, newcopyright)
            f.seek(0)
            f.write(content)
            f.truncate()
class Blank:
    """
    Class that handles all file types that are not recognized by this tool
    It simply prints the filetype to stdout and does nothing more
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright

    def insert(self):
        print("Could not determine code. Ommitting {}".format(self.path))
    
    def replace(self, new):
        """
        Detect the old copyright claim and replace it with a new version
        """
        copyright = stringifyList(self.copyright)
        newcopyright = stringifyList(new)
        with open(self.path, 'r+') as f:
            content = f.read()
            content = content.replace(copyright, newcopyright)
            f.seek(0)
            f.write(content)
            f.truncate()

def NormalMode(arg):
    """
    Execute program with normal behaviour.
    We detect all files and append License to the top
    """
    # convert the copyright file into a list of lines
    copyright = readCopyright(arg.claim)
    # convert all directories to an array of files
    files = findFiles(arg.source)
        
    for item in files:
        builder = LanguageBuilder(item, copyright, arg.language)        
        fileHandler = builder.detect()
        fileHandler.insert()

def ModifyMode(arg):
    """
    Execute program in modify mode.
    We detect existing licenses in the files and replace then with a newer version
    The modify flag should be set to execute this function
    """
    # convert the copyright file into a list of lines
    old = readCopyright(arg.modify[0])
    new = readCopyright(arg.modify[1])
    # convert all directories to an array of files
    files = findFiles(arg.source)
        
    for item in files:
        builder = LanguageBuilder(item, old, arg.language)        
        fileHandler = builder.detect()
        fileHandler.replace(new)



if __name__ == "__main__":
        arg = parser()
        if arg.version:
            print("source-marking-system Version 0.1.1")
        elif arg.developer or arg.opensource:
            print("Developed by Meyers Tom (tom@odex.be) under the MIT License")
            print("Contributions are always welcome at https://github.com/F0xedb/source-marking-system")
            print("Support the developers on github by using the sponsor flag :-)")
        elif arg.modify[0] != arg.modify[1]:
            ModifyMode(arg)
        else:
            NormalMode(arg)
        
        
